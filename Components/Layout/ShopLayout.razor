@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject NotificationService NotificationService
<RadzenComponents />
<RadzenLayout>
    <RadzenHeader>
        <TopPanelComponent />
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenColumn Size="2" SizeMD="1">
                <RadzenButton Icon="menu" ButtonStyle="ButtonStyle.Base" Text="Kategorie" Variant="Variant.Text" ButtonType="ButtonType.Button" Style="width: 2rem; height: 2rem;" class="rz-border-0 rz-shadow-0 rz-p-0" Click="@(() => OpenMenuLeftDialog())" />
            </RadzenColumn>
            <RadzenColumn Size="10" SizeMD="11">
                <TopMenu />
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    <RadzenFooter>
        <p>HKR Software @DateTime.Now.ToString("yyyy") ver. 1.04</p>
    </RadzenFooter>
</RadzenLayout>

@code {
    bool sidebarExpanded = false;
    private string? currentUrl;
    private string userRole = "Brak";
    private string? currentPath;
    private bool dialogOpened = false;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Pobierz pierwszą rolę użytkownika (jeśli ma przypisane role)
            userRole = user.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Role)?.Value ?? "Brak roli";
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !dialogOpened)
        {
            dialogOpened = true;
            await OpenMenuLeftDialog();
        }
    }
    async Task OpenMenuLeftDialog()
    {
        var parameters = new Dictionary<string, object>()
        {
            { "OnParamChanged", (Action<string, string>)OnDialogParamChanged }
        };
        await DialogService.OpenSideAsync<LeftPanelCategoryComponent>("Kategorie",parameters, options: new SideDialogOptions { CloseDialogOnOverlayClick = false, Width = "200px" , Position = DialogPosition.Left, ShowMask = false });
    }
    void OnDialogParamChanged(string param1, string param2)
    {
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = "Parametr z dialogu",
                Detail = $"Nazwa Kategorii {param1}, Numer Id {param2}",
                Duration = 4000
            });
        // Obsługa parametrów z dialogu
    }

}
