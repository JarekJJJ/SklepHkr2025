@* @page "/Account/Register"
 *@
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SklepHkr2025.Data
@using System.Text.Json
@using SklepHkr2025.Services
@using SklepHkr2025.Model.Auth

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IConfiguration _configuration
@inject NotificationService NotificationService
@inject DialogService DialogService
<RadzenCard Variant="Variant.Flat" class="rz-my-12 rz-mx-auto" Style="max-width: 200px; max-height:200px;">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-4">
        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
            <Template>Wait</Template>
        </RadzenProgressBarCircular>
    </RadzenStack>
</RadzenCard>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    [Parameter]
    public RegisterInputVm InputVm { get; set; } = new();
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    private bool veryfiOk = true;


    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(InputVm.Email))
        {
            Input.Email = InputVm.Email;
        }
        else
        {
            veryfiOk = false;
            DialogService.Close(false);
        }
        if (!string.IsNullOrEmpty(InputVm.Password))
        {
            Input.Password = InputVm.Password;
        }
        else{
            veryfiOk = false;
            DialogService.Close(false);
        }
        if (!string.IsNullOrEmpty(InputVm.ConfirmPassword))
        {
            Input.ConfirmPassword = InputVm.ConfirmPassword;
        }
        else
        {
            veryfiOk = false;
            DialogService.Close(false);
        }
        await Task.Delay(3000);
        //DialogService.Close();
        await RegisterUser();



    }
    public async Task RegisterUser()
    {
        if (!InputVm.RecaptchaOk)
        {
            NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "ReCaptcha",
                    Detail = "Błąd weryfikacji!",
                    Duration = 5000
                });
            DialogService.Close(false);
            
        }
        var context = new ValidationContext(Input);
        var results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(Input, context, results, true);

        if (!isValid)
        {
            // results zawiera listę błędów walidacji
            foreach (var error in results)
            {
                // Możesz np. wyświetlić powiadomienie lub zebrać błędy do wyświetlenia
                NotificationService.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Błąd walidacji",
                        Detail = error.ErrorMessage,
                        Duration = 5000
                    });
            }
            veryfiOk = false;
            DialogService.Close();
        }
        if (!veryfiOk)
        {
            return;
            DialogService.Close();
        }

        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            var returnConfirmation = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/RegisterConfirmation").AbsoluteUri,
                new Dictionary<string, object?> { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
            DialogService.Close(returnConfirmation);
            // RedirectManager.RedirectTo(
            //     "Account/RegisterConfirmation",
            //     new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }
        await SignInManager.SignInAsync(user, isPersistent: false);
        DialogService.Close();
        RedirectManager.RedirectTo(ReturnUrl);

    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
            DialogService.Close(false);
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
            DialogService.Close(false);
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
   

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
